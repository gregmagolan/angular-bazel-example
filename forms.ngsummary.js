(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("angular_bazel_example/node_modules/@angular/forms/forms.ngsummary", ["require", "exports", "@angular/forms", "@angular/core"], factory);
    }
})(function (require, exports) {
    "use strict";
    /**
     * @fileoverview This file was generated by the Angular template compiler. Do not edit.
     *
     * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
     * tslint:disable
     */ 
    exports.__esModule = true;
    var i0 = require("@angular/forms");
    var i1 = require("@angular/core");
    function FormsModuleNgSummary() { return [{ summaryKind: 2, type: { reference: i0.FormsModule, diDeps: [], lifecycleHooks: [] }, entryComponents: [], providers: [{ provider: { token: { identifier: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] } }, useClass: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] }, useValue: undefined, useFactory: null, useExisting: undefined, deps: [], multi: false }, module: { reference: i0.FormsModule, diDeps: [], lifecycleHooks: [] } }], modules: [{ reference: i0.ɵba, diDeps: [], lifecycleHooks: [] }, { reference: i0.FormsModule, diDeps: [], lifecycleHooks: [] }], exportedDirectives: [{ reference: i0.ɵbf }, { reference: i0.NgSelectOption }, { reference: i0.ɵq }, { reference: i0.DefaultValueAccessor }, { reference: i0.ɵbc }, { reference: i0.ɵbe }, { reference: i0.CheckboxControlValueAccessor }, { reference: i0.SelectControlValueAccessor }, { reference: i0.SelectMultipleControlValueAccessor }, { reference: i0.RadioControlValueAccessor }, { reference: i0.NgControlStatus }, { reference: i0.NgControlStatusGroup }, { reference: i0.RequiredValidator }, { reference: i0.MinLengthValidator }, { reference: i0.MaxLengthValidator }, { reference: i0.PatternValidator }, { reference: i0.CheckboxRequiredValidator }, { reference: i0.EmailValidator }, { reference: i0.NgModel }, { reference: i0.NgModelGroup }, { reference: i0.NgForm }], exportedPipes: [] }, NgModelNgSummary, NgModelGroupNgSummary, NgFormNgSummary, ɵbaNgSummary, { summaryKind: 3, type: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] } }]; }
    exports.FormsModuleNgSummary = FormsModuleNgSummary;
    function ReactiveFormsModuleNgSummary() { return [{ summaryKind: 2, type: { reference: i0.ReactiveFormsModule, diDeps: [], lifecycleHooks: [] }, entryComponents: [], providers: [{ provider: { token: { identifier: { reference: i0.FormBuilder, diDeps: [], lifecycleHooks: [] } }, useClass: { reference: i0.FormBuilder, diDeps: [], lifecycleHooks: [] }, useValue: undefined, useFactory: null, useExisting: undefined, deps: [], multi: false }, module: { reference: i0.ReactiveFormsModule, diDeps: [], lifecycleHooks: [] } }, { provider: { token: { identifier: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] } }, useClass: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] }, useValue: undefined, useFactory: null, useExisting: undefined, deps: [], multi: false }, module: { reference: i0.ReactiveFormsModule, diDeps: [], lifecycleHooks: [] } }], modules: [{ reference: i0.ɵba, diDeps: [], lifecycleHooks: [] }, { reference: i0.ReactiveFormsModule, diDeps: [], lifecycleHooks: [] }], exportedDirectives: [{ reference: i0.ɵbf }, { reference: i0.NgSelectOption }, { reference: i0.ɵq }, { reference: i0.DefaultValueAccessor }, { reference: i0.ɵbc }, { reference: i0.ɵbe }, { reference: i0.CheckboxControlValueAccessor }, { reference: i0.SelectControlValueAccessor }, { reference: i0.SelectMultipleControlValueAccessor }, { reference: i0.RadioControlValueAccessor }, { reference: i0.NgControlStatus }, { reference: i0.NgControlStatusGroup }, { reference: i0.RequiredValidator }, { reference: i0.MinLengthValidator }, { reference: i0.MaxLengthValidator }, { reference: i0.PatternValidator }, { reference: i0.CheckboxRequiredValidator }, { reference: i0.EmailValidator }, { reference: i0.FormControlDirective }, { reference: i0.FormGroupDirective }, { reference: i0.FormControlName }, { reference: i0.FormGroupName }, { reference: i0.FormArrayName }], exportedPipes: [] }, FormControlDirectiveNgSummary, FormGroupDirectiveNgSummary, FormControlNameNgSummary, FormGroupNameNgSummary, FormArrayNameNgSummary, ɵbaNgSummary, { summaryKind: 3, type: { reference: i0.FormBuilder, diDeps: [], lifecycleHooks: [] } }, { summaryKind: 3, type: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] } }]; }
    exports.ReactiveFormsModuleNgSummary = ReactiveFormsModuleNgSummary;
    function ɵbaNgSummary() { return [{ summaryKind: 2, type: { reference: i0.ɵba, diDeps: [], lifecycleHooks: [] }, entryComponents: [], providers: [], modules: [{ reference: i0.ɵba, diDeps: [], lifecycleHooks: [] }], exportedDirectives: [{ reference: i0.ɵbf }, { reference: i0.NgSelectOption }, { reference: i0.ɵq }, { reference: i0.DefaultValueAccessor }, { reference: i0.ɵbc }, { reference: i0.ɵbe }, { reference: i0.CheckboxControlValueAccessor }, { reference: i0.SelectControlValueAccessor }, { reference: i0.SelectMultipleControlValueAccessor }, { reference: i0.RadioControlValueAccessor }, { reference: i0.NgControlStatus }, { reference: i0.NgControlStatusGroup }, { reference: i0.RequiredValidator }, { reference: i0.MinLengthValidator }, { reference: i0.MaxLengthValidator }, { reference: i0.PatternValidator }, { reference: i0.CheckboxRequiredValidator }, { reference: i0.EmailValidator }], exportedPipes: [] }, ɵbfNgSummary, NgSelectOptionNgSummary, ɵqNgSummary, DefaultValueAccessorNgSummary, ɵbcNgSummary, ɵbeNgSummary, CheckboxControlValueAccessorNgSummary, SelectControlValueAccessorNgSummary, SelectMultipleControlValueAccessorNgSummary, RadioControlValueAccessorNgSummary, NgControlStatusNgSummary, NgControlStatusGroupNgSummary, RequiredValidatorNgSummary, MinLengthValidatorNgSummary, MaxLengthValidatorNgSummary, PatternValidatorNgSummary, CheckboxRequiredValidatorNgSummary, EmailValidatorNgSummary]; }
    exports.ɵbaNgSummary = ɵbaNgSummary;
    function ɵqNgSummary() { return [{ summaryKind: 1, type: { reference: i0.ɵq, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: true, isSelf: false, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.SelectMultipleControlValueAccessor } } }], lifecycleHooks: [1] }, isComponent: false, selector: "option", exportAs: null, inputs: { ngValue: "ngValue", value: "value" }, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.ɵqNgSummary = ɵqNgSummary;
    function CheckboxControlValueAccessorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.CheckboxControlValueAccessor, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }], lifecycleHooks: [] }, isComponent: false, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]", exportAs: null, inputs: {}, outputs: {}, hostListeners: { change: "onChange($event.target.checked)", blur: "onTouched()" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.CheckboxControlValueAccessor } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.CheckboxControlValueAccessorNgSummary = CheckboxControlValueAccessorNgSummary;
    function DefaultValueAccessorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.DefaultValueAccessor, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.COMPOSITION_BUFFER_MODE } } }], lifecycleHooks: [] }, isComponent: false, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]", exportAs: null, inputs: {}, outputs: {}, hostListeners: { input: "$any(this)._handleInput($event.target.value)", blur: "onTouched()", compositionstart: "$any(this)._compositionStart()", compositionend: "$any(this)._compositionEnd($event.target.value)" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.DefaultValueAccessor } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.DefaultValueAccessorNgSummary = DefaultValueAccessorNgSummary;
    function NgControlStatusNgSummary() { return [{ summaryKind: 1, type: { reference: i0.NgControlStatus, diDeps: [{ isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i0.NgControl } } }], lifecycleHooks: [] }, isComponent: false, selector: "[formControlName],[ngModel],[formControl]", exportAs: null, inputs: {}, outputs: {}, hostListeners: {}, hostProperties: { "class.ng-untouched": "ngClassUntouched", "class.ng-touched": "ngClassTouched", "class.ng-pristine": "ngClassPristine", "class.ng-dirty": "ngClassDirty", "class.ng-valid": "ngClassValid", "class.ng-invalid": "ngClassInvalid", "class.ng-pending": "ngClassPending" }, hostAttributes: {}, providers: [], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.NgControlStatusNgSummary = NgControlStatusNgSummary;
    function NgControlStatusGroupNgSummary() { return [{ summaryKind: 1, type: { reference: i0.NgControlStatusGroup, diDeps: [{ isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i0.ControlContainer } } }], lifecycleHooks: [] }, isComponent: false, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]", exportAs: null, inputs: {}, outputs: {}, hostListeners: {}, hostProperties: { "class.ng-untouched": "ngClassUntouched", "class.ng-touched": "ngClassTouched", "class.ng-pristine": "ngClassPristine", "class.ng-dirty": "ngClassDirty", "class.ng-valid": "ngClassValid", "class.ng-invalid": "ngClassInvalid", "class.ng-pending": "ngClassPending" }, hostAttributes: {}, providers: [], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.NgControlStatusGroupNgSummary = NgControlStatusGroupNgSummary;
    function NgFormNgSummary() { return [{ summaryKind: 1, type: { reference: i0.NgForm, diDeps: [{ isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }], lifecycleHooks: [6] }, isComponent: false, selector: "form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]", exportAs: "ngForm", inputs: { options: "ngFormOptions" }, outputs: { ngSubmit: "ngSubmit" }, hostListeners: { submit: "onSubmit($event)", reset: "onReset()" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.NgForm } }, deps: undefined, multi: false }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.NgFormNgSummary = NgFormNgSummary;
    function NgModelNgSummary() { return [{ summaryKind: 1, type: { reference: i0.NgModel, diDeps: [{ isAttribute: false, isHost: true, isSelf: false, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.ControlContainer } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } } }], lifecycleHooks: [1, 3] }, isComponent: false, selector: "[ngModel]:not([formControlName]):not([formControl])", exportAs: "ngModel", inputs: { name: "name", isDisabled: "disabled", model: "ngModel", options: "ngModelOptions" }, outputs: { update: "ngModelChange" }, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NgControl } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.NgModel } }, deps: undefined, multi: false }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.NgModelNgSummary = NgModelNgSummary;
    function NgModelGroupNgSummary() { return [{ summaryKind: 1, type: { reference: i0.NgModelGroup, diDeps: [{ isAttribute: false, isHost: true, isSelf: false, isSkipSelf: true, isOptional: false, token: { identifier: { reference: i0.ControlContainer } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }], lifecycleHooks: [0, 1] }, isComponent: false, selector: "[ngModelGroup]", exportAs: "ngModelGroup", inputs: { name: "ngModelGroup" }, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.NgModelGroup } }, deps: undefined, multi: false }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.NgModelGroupNgSummary = NgModelGroupNgSummary;
    function RadioControlValueAccessorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.RadioControlValueAccessor, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i0.ɵi } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Injector } } }], lifecycleHooks: [0, 1] }, isComponent: false, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", exportAs: null, inputs: { name: "name", formControlName: "formControlName", value: "value" }, outputs: {}, hostListeners: { change: "onChange()", blur: "onTouched()" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.RadioControlValueAccessor } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.RadioControlValueAccessorNgSummary = RadioControlValueAccessorNgSummary;
    function FormControlDirectiveNgSummary() { return [{ summaryKind: 1, type: { reference: i0.FormControlDirective, diDeps: [{ isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } } }], lifecycleHooks: [3] }, isComponent: false, selector: "[formControl]", exportAs: "ngForm", inputs: { form: "formControl", model: "ngModel", isDisabled: "disabled" }, outputs: { update: "ngModelChange" }, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NgControl } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.FormControlDirective } }, deps: undefined, multi: false }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.FormControlDirectiveNgSummary = FormControlDirectiveNgSummary;
    function FormControlNameNgSummary() { return [{ summaryKind: 1, type: { reference: i0.FormControlName, diDeps: [{ isAttribute: false, isHost: true, isSelf: false, isSkipSelf: true, isOptional: true, token: { identifier: { reference: i0.ControlContainer } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } } }], lifecycleHooks: [1, 3] }, isComponent: false, selector: "[formControlName]", exportAs: null, inputs: { name: "formControlName", model: "ngModel", isDisabled: "disabled" }, outputs: { update: "ngModelChange" }, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NgControl } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.FormControlName } }, deps: undefined, multi: false }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.FormControlNameNgSummary = FormControlNameNgSummary;
    function FormGroupDirectiveNgSummary() { return [{ summaryKind: 1, type: { reference: i0.FormGroupDirective, diDeps: [{ isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }], lifecycleHooks: [3] }, isComponent: false, selector: "[formGroup]", exportAs: "ngForm", inputs: { form: "formGroup" }, outputs: { ngSubmit: "ngSubmit" }, hostListeners: { submit: "onSubmit($event)", reset: "onReset()" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.FormGroupDirective } }, deps: undefined, multi: false }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.FormGroupDirectiveNgSummary = FormGroupDirectiveNgSummary;
    function FormArrayNameNgSummary() { return [{ summaryKind: 1, type: { reference: i0.FormArrayName, diDeps: [{ isAttribute: false, isHost: true, isSelf: false, isSkipSelf: true, isOptional: true, token: { identifier: { reference: i0.ControlContainer } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }], lifecycleHooks: [0, 1] }, isComponent: false, selector: "[formArrayName]", exportAs: null, inputs: { name: "formArrayName" }, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.FormArrayName } }, deps: undefined, multi: false }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.FormArrayNameNgSummary = FormArrayNameNgSummary;
    function FormGroupNameNgSummary() { return [{ summaryKind: 1, type: { reference: i0.FormGroupName, diDeps: [{ isAttribute: false, isHost: true, isSelf: false, isSkipSelf: true, isOptional: true, token: { identifier: { reference: i0.ControlContainer } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_VALIDATORS } } }, { isAttribute: false, isHost: false, isSelf: true, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.NG_ASYNC_VALIDATORS } } }], lifecycleHooks: [0, 1] }, isComponent: false, selector: "[formGroupName]", exportAs: null, inputs: { name: "formGroupName" }, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.ControlContainer } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.FormGroupName } }, deps: undefined, multi: false }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.FormGroupNameNgSummary = FormGroupNameNgSummary;
    function NgSelectOptionNgSummary() { return [{ summaryKind: 1, type: { reference: i0.NgSelectOption, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: true, isSelf: false, isSkipSelf: false, isOptional: true, token: { identifier: { reference: i0.SelectControlValueAccessor } } }], lifecycleHooks: [1] }, isComponent: false, selector: "option", exportAs: null, inputs: { ngValue: "ngValue", value: "value" }, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.NgSelectOptionNgSummary = NgSelectOptionNgSummary;
    function SelectControlValueAccessorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.SelectControlValueAccessor, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }], lifecycleHooks: [] }, isComponent: false, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", exportAs: null, inputs: { compareWith: "compareWith" }, outputs: {}, hostListeners: { change: "onChange($event.target.value)", blur: "onTouched()" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.SelectControlValueAccessor } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.SelectControlValueAccessorNgSummary = SelectControlValueAccessorNgSummary;
    function SelectMultipleControlValueAccessorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.SelectMultipleControlValueAccessor, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }], lifecycleHooks: [] }, isComponent: false, selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]", exportAs: null, inputs: { compareWith: "compareWith" }, outputs: {}, hostListeners: { change: "onChange($event.target)", blur: "onTouched()" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.SelectMultipleControlValueAccessor } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.SelectMultipleControlValueAccessorNgSummary = SelectMultipleControlValueAccessorNgSummary;
    function CheckboxRequiredValidatorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.CheckboxRequiredValidator, diDeps: [], lifecycleHooks: [] }, isComponent: false, selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]", exportAs: null, inputs: { required: "required" }, outputs: {}, hostListeners: {}, hostProperties: { "attr.required": "required ? \"\" : null" }, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.CheckboxRequiredValidator } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.CheckboxRequiredValidatorNgSummary = CheckboxRequiredValidatorNgSummary;
    function EmailValidatorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.EmailValidator, diDeps: [], lifecycleHooks: [] }, isComponent: false, selector: "[email][formControlName],[email][formControl],[email][ngModel]", exportAs: null, inputs: { email: "email" }, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.EmailValidator } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.EmailValidatorNgSummary = EmailValidatorNgSummary;
    function MaxLengthValidatorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.MaxLengthValidator, diDeps: [], lifecycleHooks: [3] }, isComponent: false, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", exportAs: null, inputs: { maxlength: "maxlength" }, outputs: {}, hostListeners: {}, hostProperties: { "attr.maxlength": "maxlength ? maxlength : null" }, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.MaxLengthValidator } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.MaxLengthValidatorNgSummary = MaxLengthValidatorNgSummary;
    function MinLengthValidatorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.MinLengthValidator, diDeps: [], lifecycleHooks: [3] }, isComponent: false, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", exportAs: null, inputs: { minlength: "minlength" }, outputs: {}, hostListeners: {}, hostProperties: { "attr.minlength": "minlength ? minlength : null" }, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.MinLengthValidator } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.MinLengthValidatorNgSummary = MinLengthValidatorNgSummary;
    function PatternValidatorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.PatternValidator, diDeps: [], lifecycleHooks: [3] }, isComponent: false, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", exportAs: null, inputs: { pattern: "pattern" }, outputs: {}, hostListeners: {}, hostProperties: { "attr.pattern": "pattern ? pattern : null" }, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.PatternValidator } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.PatternValidatorNgSummary = PatternValidatorNgSummary;
    function RequiredValidatorNgSummary() { return [{ summaryKind: 1, type: { reference: i0.RequiredValidator, diDeps: [], lifecycleHooks: [] }, isComponent: false, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", exportAs: null, inputs: { required: "required" }, outputs: {}, hostListeners: {}, hostProperties: { "attr.required": "required ? \"\" : null" }, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALIDATORS } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.RequiredValidator } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.RequiredValidatorNgSummary = RequiredValidatorNgSummary;
    function ɵbcNgSummary() { return [{ summaryKind: 1, type: { reference: i0.ɵbc, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }], lifecycleHooks: [] }, isComponent: false, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]", exportAs: null, inputs: {}, outputs: {}, hostListeners: { change: "onChange($event.target.value)", input: "onChange($event.target.value)", blur: "onTouched()" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.ɵbc } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.ɵbcNgSummary = ɵbcNgSummary;
    function ɵbeNgSummary() { return [{ summaryKind: 1, type: { reference: i0.ɵbe, diDeps: [{ isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.Renderer2 } } }, { isAttribute: false, isHost: false, isSelf: false, isSkipSelf: false, isOptional: false, token: { identifier: { reference: i1.ElementRef } } }], lifecycleHooks: [] }, isComponent: false, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]", exportAs: null, inputs: {}, outputs: {}, hostListeners: { change: "onChange($event.target.value)", input: "onChange($event.target.value)", blur: "onTouched()" }, hostProperties: {}, hostAttributes: {}, providers: [{ token: { identifier: { reference: i0.NG_VALUE_ACCESSOR } }, useClass: null, useValue: undefined, useFactory: null, useExisting: { identifier: { reference: i0.ɵbe } }, deps: undefined, multi: true }], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.ɵbeNgSummary = ɵbeNgSummary;
    function ɵbfNgSummary() { return [{ summaryKind: 1, type: { reference: i0.ɵbf, diDeps: [], lifecycleHooks: [] }, isComponent: false, selector: "form:not([ngNoForm]):not([ngNativeValidate])", exportAs: null, inputs: {}, outputs: {}, hostListeners: {}, hostProperties: {}, hostAttributes: { novalidate: "" }, providers: [], viewProviders: [], queries: [], guards: {}, viewQueries: [], entryComponents: [], changeDetection: null, template: null, componentViewType: null, rendererType: null, componentFactory: null }]; }
    exports.ɵbfNgSummary = ɵbfNgSummary;
    function ɵiNgSummary() { return [{ summaryKind: 3, type: { reference: i0.ɵi, diDeps: [], lifecycleHooks: [] } }]; }
    exports.ɵiNgSummary = ɵiNgSummary;
    function FormBuilderNgSummary() { return [{ summaryKind: 3, type: { reference: i0.FormBuilder, diDeps: [], lifecycleHooks: [] } }]; }
    exports.FormBuilderNgSummary = FormBuilderNgSummary;
});